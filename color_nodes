import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np
from matplotlib import colors as mcolors
from matplotlib import cm

# Get the labels (assuming they are in the first column)
labels = df.columns[1:]

# Get the features (assuming they are in the first row)
#features = df.iloc[0, 1:]

# Select the data part of the DataFrame (excluding labels and features)
data = df.iloc[1:, 1:]

data = data.dropna()

# Calculate pairwise correlations
correlation_matrix = df.corr(method='pearson')

# Define correlation threshold (adjust as needed)
correlation_threshold = 0.35

# Create a network graph
G = nx.Graph()

#Add nodes (feature labels)
G.add_nodes_from(labels)

# Create a dictionary to store node sizes (initially 1 for all)
node_sizes = {node: 1 for node in labels}
#print(node_sizes)

for i in range(len(labels)):
  for j in range(i+1, len(labels)):
    correlation = correlation_matrix.iloc[i, j]
    # Skip self-comparison
    if i != j:
      if abs(correlation) >= correlation_threshold and not (pd.isna(correlation) or correlation == 0):
        weight = abs(correlation)
        G.add_edge(labels[i], labels[j], weight=weight)
        # Update node sizes only for connections above threshold
        if node_sizes.get(labels[i], 0) < 9:  # Limit update to avoid exceeding desired size
            node_sizes[labels[i]] += 1
        if node_sizes.get(labels[j], 0) < 9:  # Limit update to avoid exceeding desired size
            node_sizes[labels[j]] += 1

# Apply Fruchterman-Reingold layout
pos = nx.fruchterman_reingold_layout(G)

# Get edge weight values
weight_list = [(u, v, d['weight']) for u, v, d in G.edges(data=True)]

# Normalize weights (optional)
weight_max = max(d['weight'] for u, v, d in G.edges(data=True))
weight_min = min(d['weight'] for u, v, d in G.edges(data=True))
normalized_weights = [(weight - weight_min) / (weight_max - weight_min) for u, v, weight in G.edges(data='weight')]

# Choose a colormap for edges (correlation strength)
colormap_edges = cm.coolwarm  # Adjust based on your preference

# Create a dictionary to store average correlation for each node
avg_corr_per_node = {}

for u, v, data in G.edges(data=True):
  if 'weight' in data:
        if u not in avg_corr_per_node:
            avg_corr_per_node[u] = 0
        avg_corr_per_node[u] += data['weight']

for node in avg_corr_per_node:
    if len(list(G.edges(node))) > 0:
        avg_corr_per_node[node] /= len(list(G.edges(node)))

# Define a colormap for nodes (centrality) and scaling factor
colormap_nodes = mcolors.ListedColormap(cm.coolwarm([0, 1]))  # Adjust based on your preference (e.g., cm.RdYlBu)
scaling_factor = 50  # Adjust for node color variation
min_size = 10  # Adjust for minimum node color intensity

# Normalize average correlations (optional)
corr_max = max(avg_corr_per_node.values())
corr_min = min(avg_corr_per_node.values())
normalized_correlations = [(corr - corr_min) / (corr_max - corr_min) for corr in avg_corr_per_node.values()]

# Assign edge colors based on normalized weights
edge_colors = colormap_edges(normalized_weights)
# Extend the colormap to match the number of nodes
#extended_colormap = colors.LinearSegmentedColormap.from_list('extended_colormap', colormap_nodes(np.linspace(0, 1, len(G.nodes()))))
extended_colormap = mcolors.LinearSegmentedColormap.from_list('extended_colormap', colormap_nodes(np.linspace(0, 1, len(G.nodes()))))

# Generate new node colors using the extended colormap
node_colors = extended_colormap(normalized_correlations)

# Apply Fruchterman-Reingold layout
pos = nx.fruchterman_reingold_layout(G)

# Calculate the average weight for each node
average_weights = [sum(G.edges[node, neighbor]['weight'] for neighbor in list(G.neighbors(node))) / len(list(G.neighbors(node))) for node in G.nodes]

# Normalize the average weights
norm_weights = (average_weights - min(average_weights)) / (max(average_weights) - min(average_weights))

# Create a colormap object
cmap = cm.viridis

# Generate a list of colors based on the colormap and normalized weights
node_colors = [cmap(norm_weight) for norm_weight in norm_weights]

# Draw the network with colored edges and nodes
nx.draw(G, pos, with_labels=True, node_color=node_colors,
        edge_color=edge_colors)

# Display the plot
plt.title("Correlation Network (Edge color: Correlation Strength, Node color: Average Weight)")
plt.show()
