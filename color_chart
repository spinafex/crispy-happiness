import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.cm as cm

# Get the labels (assuming they are in the first column)
labels = df.columns[1:]

# Get the features (assuming they are in the first row)
#features = df.iloc[0, 1:]

# Select the data part of the DataFrame (excluding labels and features)
data = df.iloc[1:, 1:]

data = data.dropna()

# Calculate pairwise correlations
correlation_matrix = df.corr(method='pearson')

# Define correlation threshold (adjust as needed)
correlation_threshold = 0.35

# Create a network graph
G = nx.Graph()

#Add nodes (feature labels)
G.add_nodes_from(labels)

# Create a dictionary to store node sizes (initially 1 for all)
node_sizes = {node: 1 for node in labels}
#print(node_sizes)

for i in range(len(labels)):
  for j in range(i+1, len(labels)):
    correlation = correlation_matrix.iloc[i, j]
    # Skip self-comparison
    if i != j:
      if abs(correlation) >= correlation_threshold and not (pd.isna(correlation) or correlation == 0):
        weight = abs(correlation)
        G.add_edge(labels[i], labels[j], weight=weight)
        # Update node sizes only for connections above threshold
        if node_sizes.get(labels[i], 0) < 9:  # Limit update to avoid exceeding desired size
            node_sizes[labels[i]] += 1
        if node_sizes.get(labels[j], 0) < 9:  # Limit update to avoid exceeding desired size
            node_sizes[labels[j]] += 1

# Apply Fruchterman-Reingold layout
pos = nx.fruchterman_reingold_layout(G)

# Get edge weight values
weight_list = [(u, v, d['weight']) for u, v, d in G.edges(data=True)]

# Normalize weights (optional)
weight_max = max(d['weight'] for u, v, d in G.edges(data=True))
weight_min = min(d['weight'] for u, v, d in G.edges(data=True))
normalized_weights = [(weight - weight_min) / (weight_max - weight_min) for u, v, weight in G.edges(data='weight')]

# Choose a colormap
colormap = cm.coolwarm

# Assign edge colors based on weights or normalized weights
edge_colors = colormap(normalized_weights)  # Use normalized weights (or raw weights)

# Apply Fruchterman-Reingold layout
pos = nx.fruchterman_reingold_layout(G)

# Draw the network with edge colors
nx.draw(G, pos, with_labels=True, node_color='lightblue',
        edge_color=edge_colors,
        node_size=list(node_sizes.values()))
